# -*- coding: utf-8 -*-
"""HotelBookingManager.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eQDVkPZcXYwVxV6iIWxa0IDVBSAPOJz0
"""

#### HOTEL BOOKING MANAGER    ###
import csv  # read and write to csv files
import getpass  # for password management
from datetime import datetime, timedelta  # handling date and time

# File paths
USERS_FILE = "users.csv"  # contains user name and password
ROOMS_FILE = "rooms.csv"  # contains room details

# Initialize room data
def initialize_rooms():
    try:
        with open(ROOMS_FILE, 'r'):  # open room file to check if it exists
            pass  # if file exists, do nothing
    except FileNotFoundError:  # if file is missing, create it with initial data
        # Initialize room details with room number and type
        rooms = [
            {"room_number": i + 1, "status": "available", "guest_name": "", "end_date": "", "room_type": "Economy"}
            if i < 5
            else {"room_number": i + 1, "status": "available", "guest_name": "", "end_date": "", "room_type": "Executive"}
            for i in range(10)  # Create 10 room
        ]
        with open(ROOMS_FILE, "w", newline="") as file:  # open room file to write data
            writer = csv.DictWriter(file, fieldnames=["room_number", "status", "guest_name", "end_date", "room_type"])  # define data
            writer.writeheader()
            writer.writerows(rooms)  # write room data to file

# Login system
def login():
    print("=== Login ===")
    username = input("Username: ")  # ask user to enter username
    password = getpass.getpass("Password: ")  # ask user to enter password with security

    # Open USERS csv file to check data
    with open(USERS_FILE, 'r') as file:
        reader = csv.DictReader(file)  # Read CSV file
        for row in reader:  # check over user
            if row['username'] == username and row['password'] == password:  # verify data
                print("\nLogin successful!")  # login success
                return True  # return True to show successful login
        print("\nInvalid username or password.")  # invalid login message
        return False  # return False for unsuccessful login

# View rooms and status
def view_rooms():
    with open(ROOMS_FILE, 'r') as file:  # open rooms CSV file
        reader = csv.DictReader(file)  # Read the file
        print("\n=== Room Details ===")
        for row in reader:  # check through each room record
            status = row['status']  # get room status
            details = (
                f"Room {row['room_number']} - Type: {row['room_type']} - Status: {status.capitalize()}"
            )  # format room details
            if status == "booked":  # check if room is booked
                details += f" | Guest: {row['guest_name']} | Booked Until: {row['end_date']}"  # append guest details
            print(details)  # print room details
    print()

# Book room
def book_room():
    view_rooms()  # Call  view rooms function to display rooms
    room_number = input("Enter room number to book: ")  # ask user to enter room number

    with open(ROOMS_FILE, 'r') as file:  # open rooms file to read data
        rooms = list(csv.DictReader(file))  # read all room records

    for room in rooms:  # check through rooms to find selected one
        if room['room_number'] == room_number:  # check if room number matches
            if room['status'] == "available":  # check the room is available
                guest_name = input("Enter guest name: ")  # ask for guest name
                days = int(input("Enter number of days to book the room: "))  # ask for number of days
                end_date = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d")  # calculate  end date
                room['status'] = "booked"  # save room as booked
                room['guest_name'] = guest_name  # save guest name
                room['end_date'] = end_date  # save end date

                # Payment selection
                print("\nPayment Options:")  # show payment options
                print("1. Cash")  # option 1: cash
                print("2. Card")  # option 2: card
                payment_method = input("Select a payment method (1/2): ")  # ask user for payment method

                if payment_method == "1":  # if user selects cash
                    print("\nPayment received in cash.")
                elif payment_method == "2":  # if user selects card
                    print("\nProcessing card payment...")  # processing message
                    card_number = input("Enter card number: ")
                    expiry_date = input("Enter card expiry date (MM/YY): ")  # ask for expiry date
                    cvv = input("Enter CVV: ")  # ask for CVV
                    print("\nPayment received.")
                else:  # if invalid option selected
                    print("\nInvalid payment option. Booking canceled.")  # cancel booking message
                    return  # exit function without saving booking
                break  # exit loop once room is booked
            else:  # if the room is not available
                print("\nRoom is already booked.")  # message for unavailable room
                return  # exit function

    with open(ROOMS_FILE, 'w', newline='') as file:  # open rooms file to write data
        writer = csv.DictWriter(file, fieldnames=["room_number", "status", "guest_name", "end_date", "room_type"])  # set up writer
        writer.writeheader()  # write header row
        writer.writerows(rooms)  # write updated room data

    print("\nRoom booked successfully!")
# Cancel booking
def cancel_booking():
    view_rooms()  # Display all rooms and  details
    room_number = input("Enter room number to cancel booking: ")  # Ask user for room number to cancel booking

    with open(ROOMS_FILE, 'r') as file:  # Open rooms CSV file
        rooms = list(csv.DictReader(file))  # Read all room data

    for room in rooms:  # Check through each room's data
        if room['room_number'] == room_number:  # Check if current room matches entered room number
            if room['status'] == "booked":  # check if room is booked
                room['status'] = "available"  # Change room status to available
                room['guest_name'] = ""  # Clear guest name
                room['end_date'] = ""  # Clear end date for booking
                break  # Exit loop after making changes to matched room
            else:
                print("\nRoom is not booked.")
                return

    with open(ROOMS_FILE, 'w', newline='') as file:  # Open  rooms CSV file in write mode
        writer = csv.DictWriter(file, fieldnames=["room_number", "status", "guest_name", "end_date", "room_type"])
        writer.writeheader()
        writer.writerows(rooms)  # Write all updated room data to file

    print("\nBooking canceled successfully!")  # Confirm  cancellation to user


# Check room availability
def check_availability():
    print("\n=== Available Rooms ===")  # Display heading for available rooms
    with open(ROOMS_FILE, 'r') as file:  # Open rooms CSV file
        reader = csv.DictReader(file)
        available_rooms = [row for row in reader if row['status'] == "available"]  # Find rooms

    if available_rooms:  # Check available rooms
        for room in available_rooms:  # Loop through the available rooms
            print(f"Room {room['room_number']} - Type: {room['room_type']} is available.")
    else:
        print("No rooms are currently available.")
    print()


# Search rooms by type
def search_by_type():
    room_type = input("\nEnter room type to search (Economy/Deluxe/Executive): ").capitalize()  # Ask user for  room type
    print(f"\n=== Available {room_type} Rooms ===")
    with open(ROOMS_FILE, 'r') as file:  # Open rooms CSV file
        reader = csv.DictReader(file)
        found_rooms = [row for row in reader if row['status'] == "available" and row['room_type'] == room_type]  # Output rooms matching type and status

    if found_rooms:  # Check if there are any rooms of  specified type available
        for room in found_rooms:  # Loop through matching rooms
            print(f"Room {room['room_number']} is available.")  # Display  room number
    else:
        print(f"No {room_type} rooms are available.")
    print()


# Edit room details
def edit_room_details():
    view_rooms()  # Display all rooms and details
    room_number = input("Enter room number to edit: ")  # Ask admin for room number to edit

    with open(ROOMS_FILE, 'r') as file:  # Open rooms CSV file
        rooms = list(csv.DictReader(file))  # Read all the room data

    for room in rooms:  # Check through each room's data
        if room['room_number'] == room_number:  # Check if current room matches entered room number
            print(f"\nEditing Room {room_number}:")  # Notify user that room is being edited
            new_type = input(f"Enter new type for Room {room_number} (Current: {room['room_type']}): ").capitalize()  # Ask user for new room type
            room['room_type'] = new_type if new_type else room['room_type']  # Update room type if a new type is entered
            print("\nRoom details updated!")  # Confirm that room details were updated
            break  # Exit loop after editing room
    else:
        print("Room not found.")  # Notify if entered room number does not exist

    with open(ROOMS_FILE, 'w', newline='') as file:  # Open rooms CSV file
        writer = csv.DictWriter(file, fieldnames=["room_number", "status", "guest_name", "end_date", "room_type"])
        writer.writeheader()
        writer.writerows(rooms)


# Main menu
def main_menu():
    while True:  #loop for menu
        print("\n=== Hotel Booking Manager ===")
        print("1. View Rooms \n2. Book Room \n3. Cancel Booking \n4. Check Room Availability \n5. Search Rooms by Type \n6. Edit Room Details (Admin Only) \n7. Logout")  # menu options
        choice = input("Enter your choice: ")  # ask user for choice

        if choice == "1":  # option 1: view rooms
            view_rooms()  # view_rooms function
        elif choice == "2":  # option 2: book room
            book_room()  #  book_room function
        elif choice == "3":  # option 3: cancel booking
            cancel_booking()  # cancel_booking function
        elif choice == "4":  # option 4: check room availability
            check_availability()  # check_availability function
        elif choice == "5":  # option 5: search rooms by type
            search_by_type()  # search_by_type function
        elif choice == "6":  # option 6: edit room details
            edit_room_details()  # edit_room_details function
        elif choice == "7":  # option 7: logout
            print("\nLogging out")
            break  # exit the loop
        else:  # if invalid choice
            print("\nInvalid choice. Please try again.")

# Main program
if __name__ == "__main__":  # check if script is run directly
    initialize_rooms()  # initialize rooms

    # Check if users file exists
    try:
        with open(USERS_FILE, 'r'):  # try opening  users file
            pass  # if file exists, do nothing
    except FileNotFoundError:  # if file is missing, create it
        with open(USERS_FILE, 'w', newline='') as file:  # open users file to write data
            writer = csv.DictWriter(file, fieldnames=["username", "password"])  # define names
            writer.writeheader()
            writer.writerow({"username": "admin", "password": "admin"})  # default admin credentials

    # Login loop
    while not login():  # keep asking for login until successful
        pass  # retry login

    # Show the main menu
    main_menu()  # display the main menu